@using Microsoft.Extensions.Logging
@implements IDisposable
@inject ILogger<Component4> Logger

@if (IsVisible)
{
    <h4>Component 4</h4>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    //[Parameter]
    //public bool IsVisible
    //{
    //    get => _isVisible;
    //    set
    //    {
    //        if (_isVisible == IsVisible) return;
    //        _isVisible = IsVisible;
    //        BoundVisibilityChanged.InvokeAsync(IsVisible);
    //    }
    //}

    //[Parameter]
    //public EventCallback<bool> BoundVisibilityChanged { get; set; }


    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Logger.LogInformation("----------------------------");
        Logger.LogInformation("4 - SetParametersAsync-start");
        Logger.LogInformation("----------------------------");
        await base.SetParametersAsync(parameters);
        Logger.LogInformation("4 - SetParametersAsync-end");
    }

    protected override void OnInitialized()
    {
        Logger.LogInformation("4 - OnInitialized-start");
        base.OnInitialized();
        Logger.LogInformation("4 - OnInitialized-end");
    }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("4 - OnInitializedAsync-start");
        await base.OnInitializedAsync();
        Logger.LogInformation("4 - OnInitializedAsync-end");
    }

    protected override void OnParametersSet()
    {
        Logger.LogInformation("4 - OnParametersSet-start");
        base.OnParametersSet();
        Logger.LogInformation("4 - OnParametersSet-end");
    }

    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation("4 - OnParametersSetAsync-start");
        await base.OnParametersSetAsync();
        Logger.LogInformation("4 - OnParametersSetAsync-end");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogInformation("4 - OnAfterRender({firstRender})-start", firstRender);
        base.OnAfterRender(firstRender);
        Logger.LogInformation("4 - OnAfterRender({firstRender})-end", firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("4 - OnAfterRenderAsync({firstRender})-start", firstRender);
        await base.OnAfterRenderAsync(firstRender);
        Logger.LogInformation("4 - OnAfterRenderAsync({firstRender})-end", firstRender);
    }

    public void Dispose()
    {
        Logger.LogInformation("----------------------------");
        Logger.LogInformation("4 - Dispose");
        Logger.LogInformation("----------------------------");
    }
}